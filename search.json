[{"path":"https://heavywatal.github.io/tekkamaki/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2017 Watal M. Iwasaki Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/articles/snp.html","id":"generate-a-gene-genealogy","dir":"Articles","previous_headings":"","what":"Generate a gene genealogy","title":"Simulate SNP pattern","text":"","code":"set.seed(666L) result = tekka(\"-y40 -K1000 -l2 --sa 2,2 --sj 2,2\") samples = result$sample_family[[1L]] genealogy = make_gene_genealogy(samples) |> print() ## $V  tibble [590 × 1] (S3: tbl_df/tbl/data.frame) ##  $ name: chr [1:590] \"196-1\" \"7-1\" \"186-1\" \"7-2\" ... ## # A tibble: 588 × 4 ##    from  to    birth_year capture_year ##    <chr> <chr>      <int>        <int> ##  1 196-1 7-1           40           40 ##  2 186-1 7-2           40           40 ##  3 220-2 8-1           40           40 ##  4 208-2 8-2           40           40 ##  5 277-1 15-1          40           40 ##  6 271-1 15-2          40           40 ##  7 288-2 16-1          40           40 ##  8 279-1 16-2          40           40 ##  9 131-2 3-1           39           39 ## 10 115-1 3-2           39           39 ## # ℹ 578 more rows"},{"path":"https://heavywatal.github.io/tekkamaki/articles/snp.html","id":"visualize-the-generated-gene-genealogy","dir":"Articles","previous_headings":"","what":"Visualize the generated gene genealogy","title":"Simulate SNP pattern","text":"","code":"plot(genealogy) +   theme_void() +   theme(legend.position = \"top\")"},{"path":"https://heavywatal.github.io/tekkamaki/articles/snp.html","id":"generate-snps","dir":"Articles","previous_headings":"","what":"Generate SNPs","title":"Simulate SNP pattern","text":"Randomly place fixed number mutations given genealogy without recombination. Save SNP patterns VCF file: can also generate list SNP data.frame chromosomes recombination parallel. Use RNGkind(\"L'Ecuyer-CMRG\") set.seed() reproducibility:","code":"snp = place_mutations(genealogy, 3L) |> print() ##            ## 7-1  0 0 0 ## 7-2  0 0 0 ## 8-1  0 0 0 ## 8-2  0 0 0 ## 15-1 0 0 0 ## 15-2 0 0 0 ## 16-1 0 0 0 ## 16-2 0 0 0 ## 3-1  0 0 0 ## 3-2  0 0 0 ## 4-1  0 0 0 ## 4-2  0 0 1 ## 11-1 0 0 0 ## 11-2 0 0 0 ## 12-1 0 0 0 ## 12-2 1 0 0 ## 5-1  0 0 0 ## 5-2  0 0 0 ## 1-1  0 0 0 ## 1-2  0 0 0 ## 2-1  0 0 1 ## 2-2  0 0 0 ## 6-1  0 0 0 ## 6-2  0 0 0 ## 13-1 0 0 0 ## 13-2 0 1 0 ## 9-1  0 0 0 ## 9-2  0 0 0 ## 14-1 0 0 0 ## 14-2 0 0 0 ## 10-1 0 0 1 ## 10-2 0 0 0 write_vcf(snp, some_file) ## ##fileformat=VCFv4.5 ## #CHROM   POS ID  REF ALT QUAL    FILTER  INFO    FORMAT  7   8   15  16  3   4   11  12  5   1   2   6   13  9   14  10 ## .    .   .   .   .   .   .   .   GT  0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 ## .    .   .   .   .   .   .   .   GT  0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 ## .    .   .   .   .   .   .   .   GT  0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 1|0 options(mc.cores = 2L) # parallel::detectCores(logical = FALSE) RNGkind(\"L'Ecuyer-CMRG\") set.seed(666L) snp = make_snp(samples, ss = c(chr7 = 4L, chr8 = 3L)) vcf = as_vcf(snp) |> add_pos_id() write_vcf(vcf, some_file) ## ##fileformat=VCFv4.5 ## #CHROM   POS ID  REF ALT QUAL    FILTER  INFO    FORMAT  7   8   15  16  3   4   11  12  5   1   2   6   13  9   14  10 ## chr7 1   chr7-1  .   .   .   .   .   GT  0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 ## chr7 2   chr7-2  .   .   .   .   .   GT  0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 ## chr7 3   chr7-3  .   .   .   .   .   GT  0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 ## chr7 4   chr7-4  .   .   .   .   .   GT  0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 ## chr8 1   chr8-1  .   .   .   .   .   GT  0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 ## chr8 2   chr8-2  .   .   .   .   .   GT  0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 ## chr8 3   chr8-3  .   .   .   .   .   GT  0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0"},{"path":"https://heavywatal.github.io/tekkamaki/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Watal M. Iwasaki. Author, maintainer.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Iwasaki W (2025). tekkamaki: Individual-based simulator pacific bluefin tuna. R package version 0.8.2, https://heavywatal.github.io/tekkamaki/.","code":"@Manual{,   title = {tekkamaki: Individual-based simulator of pacific bluefin tuna},   author = {Watal M. Iwasaki},   year = {2025},   note = {R package version 0.8.2},   url = {https://heavywatal.github.io/tekkamaki/}, }"},{"path":"https://heavywatal.github.io/tekkamaki/index.html","id":"tekkamaki-","dir":"","previous_headings":"","what":"Individual-based simulator of pacific bluefin tuna","title":"Individual-based simulator of pacific bluefin tuna","text":"R interface tekka.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Individual-based simulator of pacific bluefin tuna","text":"Unix-like OS (macOS, Linux, etc.) C++17 compiler (clang++ >= Apple clang 11.0, g++ >= 9.1) CMake (>= 3.21.0)","code":""},{"path":"https://heavywatal.github.io/tekkamaki/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Individual-based simulator of pacific bluefin tuna","text":"code tries find use installed tekka system. old found, latest version installed. use bleeding edge (HEAD) specific revision, set environment variable TEKKA_GIT_TAG installation: installation tekka tekkamaki can checked following commands: Please include information report issues.","code":"# install.packages(\"devtools\") devtools::install_github(\"heavywatal/tekkamaki\") Sys.setenv(TEKKA_GIT_TAG = \"HEAD\") tekkamaki::tekka_path() tekkamaki::tekka_version() sessioninfo::session_info(\"tekkamaki\")"},{"path":"https://heavywatal.github.io/tekkamaki/reference/captured.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle actually captured individuals — count_sampled","title":"Handle actually captured individuals — count_sampled","text":"Handle actually captured individuals","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/captured.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle actually captured individuals — count_sampled","text":"","code":"count_sampled(samples)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/captured.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle actually captured individuals — count_sampled","text":"samples sample_family data.frame tekka() result.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/captured.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle actually captured individuals — count_sampled","text":"data.frame following columns: capture_year location adult juvenile","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/captured.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handle actually captured individuals — count_sampled","text":"","code":"set.seed(666) result = tekka(\"-y20 -l2 --sa 2,2 --sj 2,2\") samples = result$sample_family[[1L]] count_sampled(samples) #> # tbl_df [4 x 4] #>   capture_year location adult juvenile #>          <int>    <int> <int>    <int> #> 1           19        0     2        2 #> 2           19        1     2        2 #> 3           20        0     2        2 #> 4           20        1     2        2"},{"path":"https://heavywatal.github.io/tekkamaki/reference/genealogy.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate gene genealogy from samples — make_gene_genealogy","title":"Generate gene genealogy from samples — make_gene_genealogy","text":"individual-based family tree stored sample_family transformed gene-based table gather_segments(). , ancestry gene/segment randomly assigned make_gene_genealogy(). Sampled segments ancestors can annotated annotate_sampled().","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/genealogy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate gene genealogy from samples — make_gene_genealogy","text":"","code":"make_gene_genealogy(samples)  gather_segments(samples)  count_uncoalesced(genealogy)  annotate_sampled(genealogy)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/genealogy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate gene genealogy from samples — make_gene_genealogy","text":"samples data.frame: sample_family tranfromation gather_segments(). Using latter improve performance function called many times, e.g., make_snp(). genealogy output make_gene_genealogy().","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/genealogy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate gene genealogy from samples — make_gene_genealogy","text":"igraphlite object genealogy subclass. gather_segments() transforms individual-based sample_family segment-based table. count_uncoalesced() returns count uncoalesced roots genealogy. annotate_sampled() adds \"sampled\" edge attribute genealogy: TRUE sampled, FALSE upstream samples, NA unrelated.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/tekkamaki/reference/genealogy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate gene genealogy from samples — make_gene_genealogy","text":"","code":"set.seed(666) result = tekka(\"-y20 -l2 --sa 2,2 --sj 2,2\") samples = result$sample_family[[1L]] segments = gather_segments(samples) segments #> # A tibble: 152 × 4 #>    id    birth_year capture_year parent_id #>    <chr>      <int>        <int>     <int> #>  1 7-1           20           20        55 #>  2 7-2           20           20        53 #>  3 8-1           20           20        58 #>  4 8-2           20           20        56 #>  5 15-1          20           20        73 #>  6 15-2          20           20        72 #>  7 16-1          20           20        14 #>  8 16-2          20           20        75 #>  9 3-1           19           19        38 #> 10 3-2           19           19        13 #> # ℹ 142 more rows  genealogy = make_gene_genealogy(segments) genealogy #> $V  tibble [154 × 1] (S3: tbl_df/tbl/data.frame) #>  $ name: chr [1:154] \"55-1\" \"7-1\" \"53-1\" \"7-2\" ... #> # A tibble: 152 × 4 #>    from  to    birth_year capture_year #>    <chr> <chr>      <int>        <int> #>  1 55-1  7-1           20           20 #>  2 53-1  7-2           20           20 #>  3 58-2  8-1           20           20 #>  4 56-2  8-2           20           20 #>  5 73-1  15-1          20           20 #>  6 72-1  15-2          20           20 #>  7 14-2  16-1          20           20 #>  8 75-1  16-2          20           20 #>  9 38-2  3-1           19           19 #> 10 13-1  3-2           19           19 #> # ℹ 142 more rows  count_uncoalesced(genealogy) #> [1] 12  annotate_sampled(genealogy) #> $V  tibble [154 × 1] (S3: tbl_df/tbl/data.frame) #>  $ name: chr [1:154] \"55-1\" \"7-1\" \"53-1\" \"7-2\" ... #> # A tibble: 152 × 5 #>    from  to    birth_year capture_year sampled #>    <chr> <chr>      <int>        <int> <lgl>   #>  1 55-1  7-1           20           20 TRUE    #>  2 53-1  7-2           20           20 TRUE    #>  3 58-2  8-1           20           20 TRUE    #>  4 56-2  8-2           20           20 TRUE    #>  5 73-1  15-1          20           20 TRUE    #>  6 72-1  15-2          20           20 TRUE    #>  7 14-2  16-1          20           20 TRUE    #>  8 75-1  16-2          20           20 TRUE    #>  9 38-2  3-1           19           19 TRUE    #> 10 13-1  3-2           19           19 TRUE    #> # ℹ 142 more rows"},{"path":"https://heavywatal.github.io/tekkamaki/reference/graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert sample family data.frames to igraphlight objects — as_igraph.sample_family","title":"Convert sample family data.frames to igraphlight objects — as_igraph.sample_family","text":"Connections among samples ancestors recorded sample_family data.frames. as_igraph() converts igraphlite objects.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert sample family data.frames to igraphlight objects — as_igraph.sample_family","text":"","code":"# S3 method for class 'sample_family' as_igraph(x, ...)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert sample family data.frames to igraphlight objects — as_igraph.sample_family","text":"x sample_family data.frame output tekka(). ... Additional arguments passed igraphlite::graph_from_data_frame().","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert sample family data.frames to igraphlight objects — as_igraph.sample_family","text":"","code":"set.seed(666) result = tekka(\"-y20 -l2 --sa 2,2 --sj 2,2\") samples = result$sample_family[[1L]] as_igraph(samples) #> $V  tibble [78 × 1] (S3: tbl_df/tbl/data.frame) #>  $ name: int [1:78] 0 20 19 21 18 23 22 17 26 27 ... #> # A tibble: 154 × 2 #>     from    to #>    <int> <int> #>  1     0    20 #>  2     0    20 #>  3    20    19 #>  4    20    19 #>  5    20    21 #>  6    20    21 #>  7    19    18 #>  8    21    18 #>  9    20    23 #> 10    20    23 #> # ℹ 144 more rows"},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp.html","id":null,"dir":"Reference","previous_headings":"","what":"Count half-sib pairs in HSP format — as_hsp","title":"Count half-sib pairs in HSP format — as_hsp","text":"Half-sib pairs counted samples grouped birth year sampled location.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count half-sib pairs in HSP format — as_hsp","text":"","code":"as_hsp(samples)  write_hsp(x, path = \"hsp.txt\")  read_hsp(path)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count half-sib pairs in HSP format — as_hsp","text":"samples sample_family data.frame tekka() result. x outcome as_hsp() path file name connection write ","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count half-sib pairs in HSP format — as_hsp","text":"data.frame \"hsp\" subclass six columns: cohort_i, cohort_j: birth year samples location_i, location_j: sampling comps: number possible comparisons group j. samples compared pairwise, excluding self-comparisons. total number comparisons equals \\(n \\choose 2\\), n total sample size. hsps: count half-sib pairs observed group j","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count half-sib pairs in HSP format — as_hsp","text":"as_hsp() converts result data frame HSP format. write_hsp() writes HSP data.frame file.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count half-sib pairs in HSP format — as_hsp","text":"","code":"set.seed(666) result = tekka(\"-y20 -l2 --sa 2,2 --sj 2,2\") samples = result$sample_family[[1L]] as_hsp(samples) #> # A tibble: 55 × 6 #>    cohort_i cohort_j location_i location_j comps  hsps #>       <int>    <int>      <int>      <int> <int> <int> #>  1       11       11          1          1     1     1 #>  2       15       15          0          1     1     1 #>  3       19       19          0          0     1     1 #>  4        9        9          1          1     0     0 #>  5        9       11          1          1     2     0 #>  6        9       14          1          0     1     0 #>  7        9       15          1          0     1     0 #>  8        9       15          1          1     1     0 #>  9        9       16          1          0     2     0 #> 10        9       19          1          0     2     0 #> # ℹ 45 more rows"},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp2.html","id":null,"dir":"Reference","previous_headings":"","what":"Count half-sib pairs in HSP2 format — as_hsp2","title":"Count half-sib pairs in HSP2 format — as_hsp2","text":"extended version HSP format additional columns grouping.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count half-sib pairs in HSP2 format — as_hsp2","text":"","code":"as_hsp2(samples)  write_hsp2(x, path = \"hsp2.tsv\")  read_hsp2(path)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count half-sib pairs in HSP2 format — as_hsp2","text":"samples sample_family data.frame tekka() result. x outcome as_hsp2(). path file name connection write .","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count half-sib pairs in HSP2 format — as_hsp2","text":"data.frame \"hsp2\" subclass following columns: cohort_i, cohort_j: birth year samples capture_age_i, capture_age_j: samples location_i, location_j: sampling comps: number possible comparisons group j. samples compared pairwise, excluding self-comparisons. total number comparisons equals \\(n \\choose 2\\), n total sample size. hsps: count half-sib pairs observed group j","code":""},{"path":[]},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count half-sib pairs in HSP2 format — as_hsp2","text":"","code":"set.seed(666) result = tekka(\"-y20 -l2 --sa 2,2 --sj 2,2\") samples = result$sample_family[[1L]] as_hsp2(samples) #> # A tibble: 66 × 8 #>    cohort_i cohort_j capture_age_i capture_age_j location_i location_j comps #>       <int>    <int>         <int>         <int>      <int>      <int> <int> #>  1       11       11             8             9          1          1     1 #>  2       15       15             4             5          0          1     1 #>  3       19       19             0             0          0          0     1 #>  4        9        9            10            10          1          1     0 #>  5        9       11            10             8          1          1     1 #>  6        9       11            10             9          1          1     1 #>  7        9       14            10             5          1          0     1 #>  8        9       15            10             4          1          0     1 #>  9        9       15            10             5          1          1     1 #> 10        9       16            10             4          1          0     2 #> # ℹ 56 more rows #> # ℹ 1 more variable: hsps <int>"},{"path":"https://heavywatal.github.io/tekkamaki/reference/kinship.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze kinship within samples — find_kinship","title":"Analyze kinship within samples — find_kinship","text":"Analyze kinship within samples","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/kinship.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze kinship within samples — find_kinship","text":"","code":"find_kinship(samples, order = 4L, experimental = FALSE)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/kinship.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze kinship within samples — find_kinship","text":"samples sample_family order integer experimental boolean","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/kinship.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze kinship within samples — find_kinship","text":"data.frame following columns: , : sample IDs integer. path: text representation path found samples; ascending 1 descending 0; count paths indicated _n suffix; e.g., \"10_1\" \"10_2\" means half-sibling full-sibling pairs, respectively. degree: number steps path. label: aliases path. See https://github.com/heavywatal/tekkamaki/blob/main/data-raw/kinlabels.R available labels.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/kinship.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyze kinship within samples — find_kinship","text":"find_kinship() finds kinship given order.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/tekkamaki/reference/kinship.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyze kinship within samples — find_kinship","text":"","code":"set.seed(666) result = tekka(\"-y20 -l2 --sa 2,2 --sj 2,2\") samples = result$sample_family[[1L]] find_kinship(samples, order = 3L) #> # A tibble: 20 × 5 #>     from    to path  degree label #>    <int> <int> <chr>  <int> <fct> #>  1     1     3 100_1      3 HUN   #>  2     1    13 10_1       2 HS    #>  3     2     4 100_1      3 HUN   #>  4     2     8 100_1      3 HUN   #>  5     3     4 10_1       2 HS    #>  6     3     5 110_1      3 HUN   #>  7     4     5 110_1      3 HUN   #>  8     5     7 100_1      3 HUN   #>  9     5     8 100_2      3 UN    #> 10     6    10 110_2      3 UN    #> 11     9    10 110_3      3 NA    #> 12     9    14 10_1       2 HS    #> 13     9    16 100_1      3 HUN   #> 14    10    11 100_2      3 UN    #> 15    10    14 100_2      3 UN    #> 16    10    15 100_1      3 HUN   #> 17    13     3 0_1        1 PO    #> 18    13    10 110_1      3 HUN   #> 19    14    15 100_1      3 HUN   #> 20    14    16 0_1        1 PO"},{"path":"https://heavywatal.github.io/tekkamaki/reference/parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize parameter json file — plot_parameters_json","title":"Visualize parameter json file — plot_parameters_json","text":"Visualize parameter json file","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize parameter json file — plot_parameters_json","text":"","code":"plot_parameters_json(obj = default_parameters_json())"},{"path":"https://heavywatal.github.io/tekkamaki/reference/parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize parameter json file — plot_parameters_json","text":"obj jsonlite object","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/parameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize parameter json file — plot_parameters_json","text":"","code":"plot_parameters_json()"},{"path":"https://heavywatal.github.io/tekkamaki/reference/path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about the tekka executable — tekka_path","title":"Get information about the tekka executable — tekka_path","text":"simulator tekka command-line tool written C++. executable built installed along R package unless pre-installed one found package installation.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about the tekka executable — tekka_path","text":"","code":"tekka_path()  tekka_version()"},{"path":"https://heavywatal.github.io/tekkamaki/reference/path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information about the tekka executable — tekka_path","text":"tekka_path() returns path tekka executable. tekka_version() returns version tekka executable.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/tekkamaki/reference/path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information about the tekka executable — tekka_path","text":"","code":"if (FALSE) { # \\dontrun{ tekka_path()  tekka_version() } # }"},{"path":"https://heavywatal.github.io/tekkamaki/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for quick visualization — augment.sample_family","title":"Methods for quick visualization — augment.sample_family","text":"Sample family trees generated gene genealogies can visualized briefly plot() method. output can customized ggplot2 functions. input can also customized. First, use augment() add coordinates attributes plotting. can modify needed. Finally, build plot ggplot2::ggplot().","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for quick visualization — augment.sample_family","text":"","code":"# S3 method for class 'sample_family' augment(x, layout = NULL, ...)  # S3 method for class 'genealogy' augment(x, layout = NULL, ...)  layout_demography(x)  # S3 method for class 'genealogy' plot(x, ..., lwd = 0.5, cex = 5, pch = 16)  # S3 method for class 'sample_family' plot(x, ..., lwd = 0.5, cex = 5, pch = 16)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for quick visualization — augment.sample_family","text":"x sample_family genealogy data.frame. layout data.frame function compute coordinates. layout_demography() applied default. ... Additional arguments passed layout function. lwd passed ggplot2::geom_segment. cex, pch passed ggplot2::geom_point ggplot2::geom_text.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for quick visualization — augment.sample_family","text":"augment() returns data.frame suitable plotting. layout_demography() computes coordinates plotting genealogy. plot() returns ggplot2 object.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for quick visualization — augment.sample_family","text":"","code":"set.seed(666) result = tekka(\"-y20 -l2 --sa 2,2 --sj 2,2\") samples = result$sample_family[[1L]] augment(samples) #> # A tibble: 154 × 10 #>     from    to birth_year capture_year sampled     x     y  xend  yend label #>    <int> <int>      <int>        <int> <lgl>   <int> <int> <int> <int> <int> #>  1    17     1         15           19 TRUE        1    15     3    11     1 #>  2    24     1         15           19 TRUE        1    15     1    10     1 #>  3    30     2         14           19 TRUE        1    14     1     8     2 #>  4    36     2         14           19 TRUE        1    14     3     4     2 #>  5    13     3         19           19 TRUE        1    19     2    15     3 #>  6    38     3         19           19 TRUE        1    19     3    15     3 #>  7    45     4         19           19 TRUE        2    19     1    13     4 #>  8    38     4         19           19 TRUE        2    19     3    15     4 #>  9    49     5         16           20 TRUE        1    16     3     8     5 #> 10    40     5         16           20 TRUE        1    16     2     9     5 #> # ℹ 144 more rows  plot(samples) +   ggplot2::theme_void() +   ggplot2::theme(legend.position = \"top\")   genealogy = make_gene_genealogy(samples) plot(genealogy) +   ggplot2::theme_void() +   ggplot2::theme(legend.position = \"top\")"},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Count parent-offspring pairs in POP format — as_pop","title":"Count parent-offspring pairs in POP format — as_pop","text":"Parent-offspring pairs counted potential offspring cohort potential parents grouped age, year, location sampling.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count parent-offspring pairs in POP format — as_pop","text":"","code":"as_pop(samples)  write_pop(x, path = \"pop.txt\")  read_pop(path)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count parent-offspring pairs in POP format — as_pop","text":"samples sample_family data.frame tekka() result. x outcome as_pop() path file name connection write ","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count parent-offspring pairs in POP format — as_pop","text":"data.frame \"pop\" subclass six columns: cohort: birth year offspring capture_year: parents capture_age: parents location: parents sampled pops: count parent-offspring pairs observed within samples comps: number possible comparisons, including pairs one sample younger .","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count parent-offspring pairs in POP format — as_pop","text":"as_pop() converts sample_family data frame POP format. write_pop() writes POP data.frame file.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count parent-offspring pairs in POP format — as_pop","text":"","code":"set.seed(666) result = tekka(\"-y20 -l2 --sa 2,2 --sj 2,2\") samples = result$sample_family[[1L]] as_pop(samples) #> # A tibble: 30 × 6 #>    cohort capture_year capture_age location  pops comps #>     <int>        <int>       <int>    <int> <int> <int> #>  1     19           20           5        1     1     4 #>  2     20           20           9        1     1     4 #>  3     11           19          10        1     0     2 #>  4     14           19           8        1     0     1 #>  5     14           19          10        1     0     1 #>  6     14           20           9        1     0     1 #>  7     15           19           5        0     0     2 #>  8     15           19           8        1     0     2 #>  9     15           19          10        1     0     2 #> 10     15           20           9        1     0     2 #> # ℹ 20 more rows"},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop2.html","id":null,"dir":"Reference","previous_headings":"","what":"Count parent-offspring pairs in POP2 format — as_pop2","title":"Count parent-offspring pairs in POP2 format — as_pop2","text":"extended version POP format additional columns grouping.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count parent-offspring pairs in POP2 format — as_pop2","text":"","code":"as_pop2(samples)  write_pop2(x, path = \"pop2.tsv\")  read_pop2(path)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count parent-offspring pairs in POP2 format — as_pop2","text":"samples sample_family data.frame tekka() result. x outcome as_pop2() path file name connection write .","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count parent-offspring pairs in POP2 format — as_pop2","text":"data.frame \"pop2\" subclass following columns: cohort_parent, cohort_offspring: birth year samples capture_age_parent, capture_age_offspring location_parent, location_offspring: sampling pops: count parent-offspring pairs observed within samples comps: number possible comparisons, including pairs one sample younger .","code":""},{"path":[]},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count parent-offspring pairs in POP2 format — as_pop2","text":"","code":"set.seed(666) result = tekka(\"-y20 -l2 --sa 2,2 --sj 2,2\") samples = result$sample_family[[1L]] as_pop2(samples) #> # A tibble: 51 × 8 #>    cohort_parent cohort_offspring capture_age_parent capture_age_offspring #>            <int>            <int>              <int>                 <int> #>  1            11               20                  9                     0 #>  2            15               19                  5                     0 #>  3             9               11                 10                     8 #>  4             9               11                 10                     9 #>  5             9               14                 10                     5 #>  6             9               15                 10                     4 #>  7             9               15                 10                     5 #>  8             9               16                 10                     4 #>  9             9               19                 10                     0 #> 10             9               19                 10                     0 #> # ℹ 41 more rows #> # ℹ 4 more variables: location_parent <int>, location_offspring <int>, #> #   pops <int>, comps <int>"},{"path":"https://heavywatal.github.io/tekkamaki/reference/read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read results from tekka — read_tekka","title":"Read results from tekka — read_tekka","text":"tekka simulator writes results configuration files directory. function reads one-row data.frame.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read results from tekka — read_tekka","text":"","code":"read_tekka(indir = getwd())"},{"path":"https://heavywatal.github.io/tekkamaki/reference/read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read results from tekka — read_tekka","text":"indir output directory tekka.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read results from tekka — read_tekka","text":"one-row data.frame configuration parameters results. two result columns: sample_family: list data.frames samples ancestors. demography: list data.frames population demography.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/tekkamaki/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics augment igraphlite as_igraph","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/sampled.html","id":null,"dir":"Reference","previous_headings":"","what":"Count actually sampled individuals — count_sampled","title":"Count actually sampled individuals — count_sampled","text":"Count actually sampled individuals","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/sampled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count actually sampled individuals — count_sampled","text":"","code":"count_sampled(samples)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/sampled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count actually sampled individuals — count_sampled","text":"samples sample_family data.frame tekka() result.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/sampled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count actually sampled individuals — count_sampled","text":"data.frame following columns: capture_year location adult juvenile","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/sampled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count actually sampled individuals — count_sampled","text":"","code":"set.seed(666) result = tekka(\"-y20 -l2 --sa 2,2 --sj 2,2\") samples = result$sample_family[[1L]] count_sampled(samples) #> # A tibble: 4 × 4 #>   capture_year location adult juvenile #>          <int>    <int> <int>    <int> #> 1           19        0     2        2 #> 2           19        1     2        2 #> 3           20        0     2        2 #> 4           20        1     2        2"},{"path":"https://heavywatal.github.io/tekkamaki/reference/snp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate SNPs on given samples. — make_snp","title":"Generate SNPs on given samples. — make_snp","text":"place_mutations() generates SNP data.frame randomly placing fixed number mutations given genealogy. means sites perfectly linked . make_snp_chromosome() simulates SNP data.frame chromosome using place_mutations() recombination. make_snp() calls chromosome parallel. Use RNGkind(\"L'Ecuyer-CMRG\") set.seed() get reproducible results. number CPU cores used can configured via mc.cores option.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/snp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate SNPs on given samples. — make_snp","text":"","code":"make_snp(samples, ss)  make_snp_chromosome(genealogy, segsites)  place_mutations(genealogy, segsites, v_sampled = NULL)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/snp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate SNPs on given samples. — make_snp","text":"samples data.frame: sample_family tranfromation gather_segments(). Using latter improve performance function called many times, e.g., make_snp(). ss sequence segsites; length number chromosome; element number segsites chromosome. named vector given, output also named. genealogy output make_gene_genealogy(). segsites number segregating sites segment. v_sampled sampled vertices. Use fix output order.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/snp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate SNPs on given samples. — make_snp","text":"make_snp() returns list data.frame chromosome. make_snp_chromosome() place_mutations() returns data.frame segregating sites columns, sample segments rows.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/snp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate SNPs on given samples. — make_snp","text":"assumed node genealogy one recombination event chromosome. words, chromosome fixed number recombination events, equal number nodes genealogy. locations randomly assigned, segregating sites placed among . example, chromosome 3 segsites genealogy 10 nodes can illustrated like : 5' rrrSrrSrrrrSr 3'.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/tekkamaki/reference/snp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate SNPs on given samples. — make_snp","text":"","code":"RNGkind(\"L'Ecuyer-CMRG\") set.seed(666) result = tekka(\"-y20 -l2 --sa 2,2 --sj 2,2\") samples = result$sample_family[[1L]] segments = gather_segments(samples) genealogy = make_gene_genealogy(segments)  place_mutations(genealogy, 3L) |> str() #> 'data.frame':\t32 obs. of  3 variables: #>  $ : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ : int  0 0 0 0 0 0 0 0 0 0 ...  ss = c(chr1 = 3, chr2 = 2) make_snp(segments, ss) |> str() #> List of 2 #>  $ chr1:'data.frame':\t32 obs. of  3 variables: #>   ..$ : int [1:32] 0 0 0 1 0 0 0 0 0 0 ... #>   ..$ : int [1:32] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ : int [1:32] 0 0 0 0 0 0 0 0 0 0 ... #>  $ chr2:'data.frame':\t32 obs. of  2 variables: #>   ..$ : int [1:32] 0 0 1 0 0 0 0 0 0 0 ... #>   ..$ : int [1:32] 0 0 0 0 0 0 0 0 0 0 ..."},{"path":"https://heavywatal.github.io/tekkamaki/reference/tekka.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the tekka simulator. — tekka","title":"Run the tekka simulator. — tekka","text":"result first written directory cache, read data.frame. previous result exactly arguments found cache, read without calling tekka.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/tekka.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the tekka simulator. — tekka","text":"","code":"tekka(args = character(0L), cache = NULL)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/tekka.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the tekka simulator. — tekka","text":"args Command line arguments string vector. See tekka manual tekka(\"--help\") available options. Note random --seed appended given. Use set.seed() --seed explicitly reproducibility caching. cache Parent directory tekka output. TRUE equivalent \".\" (current directory). tempdir() used cases including default (NULL), discarded end R session. Set FALSE force tekka run overwrite previous results .","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/tekka.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the tekka simulator. — tekka","text":"data.frame read read_tekka().","code":""},{"path":[]},{"path":"https://heavywatal.github.io/tekkamaki/reference/tekka.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run the tekka simulator. — tekka","text":"","code":"set.seed(666) # tekka(\"--help\")  result = tekka(\"-y20 -l2 --sa 2,2 --sj 2,2\") result |> dplyr::select(!\"outdir\") #> # A tibble: 1 × 16 #>   carrying_capacity fishing_coef fishing_mortality  last migration_matrices #>               <dbl> <list>       <list>            <int> <list>             #> 1              2000 <list [0]>   <dbl [84]>            2 <dbl [9 × 4 × 4]>  #> # ℹ 11 more variables: natural_mortality <list>, origin <int>, #> #   overdispersion <dbl>, recruitment <dbl>, sample_size_adult <list>, #> #   sample_size_juvenile <list>, seed <int>, weight_for_age <list>, #> #   years <int>, sample_family <list>, demography <list>  result$sample_family[[1L]] #> # A tibble: 96 × 6 #>       id father_id mother_id birth_year location capture_year #>    <int>     <int>     <int>      <int>    <int>        <int> #>  1    20         0         0         -4       NA           NA #>  2    19        20        20          0       NA           NA #>  3    21        20        20          0       NA           NA #>  4    18        19        21          5       NA           NA #>  5    23        20        20          0       NA           NA #>  6    22        19        23          4       NA           NA #>  7    17        18        22         11       NA           NA #>  8    26        20        20          0       NA           NA #>  9    27        20        20          0       NA           NA #> 10    25        26        27          5       NA           NA #> # ℹ 86 more rows  result$demography[[1L]] #> # A tibble: 827 × 5 #>     year season location   age count #>    <int>  <int>    <int> <int> <int> #>  1     0      0        0     0  2000 #>  2     0      1        0     0  1227 #>  3     0      2        0     0   787 #>  4     0      3        0     0   469 #>  5     4      0        0     0  2036 #>  6     4      0        0     4    24 #>  7     4      1        0     0  1250 #>  8     4      1        0     4    20 #>  9     4      2        0     0   801 #> 10     4      2        0     4    19 #> # ℹ 817 more rows"},{"path":"https://heavywatal.github.io/tekkamaki/reference/tekkamaki-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tekkamaki: Individual-based simulator of pacific bluefin tuna — tekkamaki-package","title":"tekkamaki: Individual-based simulator of pacific bluefin tuna — tekkamaki-package","text":"Individual-based simulator pacific bluefin tuna.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/tekkamaki/reference/tekkamaki-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tekkamaki: Individual-based simulator of pacific bluefin tuna — tekkamaki-package","text":"Maintainer: Watal M. Iwasaki heavywatal@gmail.com (ORCID)","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/vcf.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities for VCF format — as_vcf","title":"Utilities for VCF format — as_vcf","text":"as_vcf() converts SNP data.frame generated make_snp() VCF-like data.frame. \"CHROM\", \"FORMAT\", \"gt\" columns filled. add_pos_id() useful fill \"POS\" \"ID\" columns. assigns sequential integers \"POS\" column \"CHROM\", combines \"CHROM\" make unique \"ID\" values. write_vcf() read_vcf() used write read VCF files. SNP data.frame given, converted writing.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/vcf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities for VCF format — as_vcf","text":"","code":"as_vcf(x, phased = TRUE, chrom = NA_character_, pos = NA_integer_)  add_pos_id(x)  write_vcf(x, file)  read_vcf(file)  as_vcf_gt(x, phased = TRUE)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/vcf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities for VCF format — as_vcf","text":"x SNP data.frame VCF data.frame. phased logical switch separators: | vs /. chrom Characters. pos Integers. file path connection.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/vcf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utilities for VCF format — as_vcf","text":"VCF-like data.frame \"vcf\" subclass. as_vcf_gt() returns single-column data.frame \"vcf_gt\" subclass.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/tekkamaki/reference/vcf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utilities for VCF format — as_vcf","text":"","code":"RNGkind(\"L'Ecuyer-CMRG\") set.seed(666) result = tekka(\"-y20 -l2 --sa 2,2 --sj 2,2\") samples = result$sample_family[[1L]] ss = c(chr1 = 3, chr2 = 2) snp = make_snp(samples, ss) vcf = as_vcf(snp) |> add_pos_id() vcf #> # A tibble: 5 × 10 #>   CHROM   POS ID     REF   ALT   QUAL  FILTER INFO  FORMAT gt                    #>   <chr> <int> <chr>  <chr> <chr> <chr> <chr>  <chr> <chr>  <chr>                 #> 1 chr1      1 chr1-1 NA    NA    NA    NA     NA    GT     \"0|0\\t0|0\\t0|0\\t0|0\\… #> 2 chr1      2 chr1-2 NA    NA    NA    NA     NA    GT     \"0|0\\t0|0\\t0|0\\t0|0\\… #> 3 chr1      3 chr1-3 NA    NA    NA    NA     NA    GT     \"0|1\\t0|0\\t0|0\\t0|0\\… #> 4 chr2      1 chr2-1 NA    NA    NA    NA     NA    GT     \"0|0\\t0|0\\t0|0\\t0|0\\… #> 5 chr2      2 chr2-2 NA    NA    NA    NA     NA    GT     \"0|0\\t0|0\\t0|0\\t0|0\\…"}]
