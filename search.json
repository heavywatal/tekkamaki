[{"path":"https://heavywatal.github.io/tekkamaki/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2017 Watal M. Iwasaki Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/articles/snp.html","id":"generate-a-gene-genealogy","dir":"Articles","previous_headings":"","what":"Generate a gene genealogy","title":"Simulate SNP pattern","text":"","code":"set.seed(666L) result = tekka(\"-y40 -K1000 -l2 --sa 2,2 --sj 2,2\") samples = result$sample_family[[1L]] genealogy = make_gene_genealogy(samples) |> print() ## $V  tibble [590 × 1] (S3: tbl_df/tbl/data.frame) ##  $ name: chr [1:590] \"196-1\" \"7-1\" \"186-1\" \"7-2\" ... ## # A tibble: 588 × 4 ##    from  to    birth_year capture_year ##    <chr> <chr>      <int>        <int> ##  1 196-1 7-1           40           40 ##  2 186-1 7-2           40           40 ##  3 220-2 8-1           40           40 ##  4 208-2 8-2           40           40 ##  5 277-1 15-1          40           40 ##  6 271-1 15-2          40           40 ##  7 288-2 16-1          40           40 ##  8 279-1 16-2          40           40 ##  9 131-2 3-1           39           39 ## 10 115-1 3-2           39           39 ## # ℹ 578 more rows"},{"path":"https://heavywatal.github.io/tekkamaki/articles/snp.html","id":"visualize-the-generated-gene-genealogy","dir":"Articles","previous_headings":"","what":"Visualize the generated gene genealogy","title":"Simulate SNP pattern","text":"","code":"plot(genealogy) +   theme_void() +   theme(legend.position = \"top\")"},{"path":"https://heavywatal.github.io/tekkamaki/articles/snp.html","id":"generate-snps","dir":"Articles","previous_headings":"","what":"Generate SNPs","title":"Simulate SNP pattern","text":"Randomly place fixed number mutations given genealogy without recombination. Save SNP patterns VCF file: can also generate list SNP data.frame chromosomes recombination parallel. Use RNGkind(\"L'Ecuyer-CMRG\") set.seed() reproducibility:","code":"snp = place_mutations(genealogy, 3L) |> print() ##            ## 7-1  0 0 0 ## 7-2  0 0 0 ## 8-1  0 0 0 ## 8-2  0 0 0 ## 15-1 0 0 0 ## 15-2 0 0 0 ## 16-1 0 0 0 ## 16-2 0 0 0 ## 3-1  0 0 0 ## 3-2  0 0 0 ## 4-1  0 0 0 ## 4-2  0 0 1 ## 11-1 0 0 0 ## 11-2 0 0 0 ## 12-1 0 0 0 ## 12-2 1 0 0 ## 5-1  0 0 0 ## 5-2  0 0 0 ## 1-1  0 0 0 ## 1-2  0 0 0 ## 2-1  0 0 1 ## 2-2  0 0 0 ## 6-1  0 0 0 ## 6-2  0 0 0 ## 13-1 0 0 0 ## 13-2 0 1 0 ## 9-1  0 0 0 ## 9-2  0 0 0 ## 14-1 0 0 0 ## 14-2 0 0 0 ## 10-1 0 0 1 ## 10-2 0 0 0 write_vcf(snp, some_file) ## ##fileformat=VCFv4.5 ## #CHROM   POS ID  REF ALT QUAL    FILTER  INFO    FORMAT  7   8   15  16  3   4   11  12  5   1   2   6   13  9   14  10 ## .    .   .   .   .   .   .   .   GT  0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 ## .    .   .   .   .   .   .   .   GT  0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 ## .    .   .   .   .   .   .   .   GT  0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 1|0 options(mc.cores = 2L) # parallel::detectCores(logical = FALSE) RNGkind(\"L'Ecuyer-CMRG\") set.seed(666L) snp = make_snp(samples, ss = c(chr7 = 4L, chr8 = 3L)) vcf = as_vcf(snp) |> add_pos_id() write_vcf(vcf, some_file) ## ##fileformat=VCFv4.5 ## #CHROM   POS ID  REF ALT QUAL    FILTER  INFO    FORMAT  7   8   15  16  3   4   11  12  5   1   2   6   13  9   14  10 ## chr7 1   chr7-1  .   .   .   .   .   GT  0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 ## chr7 2   chr7-2  .   .   .   .   .   GT  0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 ## chr7 3   chr7-3  .   .   .   .   .   GT  0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 ## chr7 4   chr7-4  .   .   .   .   .   GT  0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 ## chr8 1   chr8-1  .   .   .   .   .   GT  0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 ## chr8 2   chr8-2  .   .   .   .   .   GT  0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 ## chr8 3   chr8-3  .   .   .   .   .   GT  0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0"},{"path":"https://heavywatal.github.io/tekkamaki/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Watal M. Iwasaki. Author, maintainer.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Iwasaki W (2025). tekkamaki: Individual-based simulator pacific bluefin tuna. R package version 0.8.1.1, https://heavywatal.github.io/tekkamaki/.","code":"@Manual{,   title = {tekkamaki: Individual-based simulator of pacific bluefin tuna},   author = {Watal M. Iwasaki},   year = {2025},   note = {R package version 0.8.1.1},   url = {https://heavywatal.github.io/tekkamaki/}, }"},{"path":"https://heavywatal.github.io/tekkamaki/index.html","id":"tekkamaki-","dir":"","previous_headings":"","what":"Individual-based simulator of pacific bluefin tuna","title":"Individual-based simulator of pacific bluefin tuna","text":"R interface tekka.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Individual-based simulator of pacific bluefin tuna","text":"Unix-like OS (macOS, Linux, etc.) C++17 compiler (clang++ >= Apple clang 11.0, g++ >= 9.1) CMake (>= 3.21.0)","code":""},{"path":"https://heavywatal.github.io/tekkamaki/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Individual-based simulator of pacific bluefin tuna","text":"code tries find use installed tekka system. old found, latest version installed. use bleeding edge (HEAD) specific revision, set environment variable TEKKA_GIT_TAG installation: installation tekka tekkamaki can checked following commands: Please include information report issues.","code":"# install.packages(\"devtools\") devtools::install_github(\"heavywatal/tekkamaki\") Sys.setenv(TEKKA_GIT_TAG = \"HEAD\") tekkamaki::tekka_path() tekkamaki::tekka_version() sessioninfo::session_info(\"tekkamaki\")"},{"path":"https://heavywatal.github.io/tekkamaki/reference/genealogy.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to generate gene genealogy from sample family table — make_gene_genealogy","title":"Functions to generate gene genealogy from sample family table — make_gene_genealogy","text":"make_gene_genealogy() generates random gene genealogy table.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/genealogy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to generate gene genealogy from sample family table — make_gene_genealogy","text":"","code":"make_gene_genealogy(samples)  gather_segments(samples)  count_uncoalesced(genealogy)  annotate_sampled(genealogy)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/genealogy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to generate gene genealogy from sample family table — make_gene_genealogy","text":"samples data.frame: sample_family output gather_segments(). genealogy output make_gene_genealogy().","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/genealogy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions to generate gene genealogy from sample family table — make_gene_genealogy","text":"gather_segments() transforms individual-based sample_family segment-based table. count_uncoalesced() counts uncoalesced roots samples. annotate_sampled() adds \"sampled\" edge attribute: TRUE sampled, FALSE upstream samples, NA unrelated.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert genealogy to igraph — as_igraph.sample_family","title":"Convert genealogy to igraph — as_igraph.sample_family","text":"Convert genealogy igraph","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert genealogy to igraph — as_igraph.sample_family","text":"","code":"# S3 method for class 'sample_family' as_igraph(x, ...)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert genealogy to igraph — as_igraph.sample_family","text":"x sample_family table ... Additional arguments passed igraphlite::graph_from_data_frame().","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert genealogy to igraph — as_igraph.sample_family","text":"as_igraph converts result igraph.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp.html","id":null,"dir":"Reference","previous_headings":"","what":"Count half-sib pairs in HSP format — as_hsp","title":"Count half-sib pairs in HSP format — as_hsp","text":"Half-sib pairs counted samples grouped birth year sampled location.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count half-sib pairs in HSP format — as_hsp","text":"","code":"as_hsp(samples)  write_hsp(x, path = \"hsp.txt\")  read_hsp(path)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count half-sib pairs in HSP format — as_hsp","text":"samples sample_family data.frame tekka() result. x outcome as_hsp() path file name connection write ","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count half-sib pairs in HSP format — as_hsp","text":"data.frame \"hsp\" class six columns: cohort_i, cohort_j: birth year samples location_i, location_j: sampling comps: number possible comparisons group j. samples compared pairwise, excluding self-comparisons. total number comparisons equals \\(n \\choose 2\\), n total sample size. hsps: count half-sib pairs observed group j","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count half-sib pairs in HSP format — as_hsp","text":"as_hsp() converts result data frame HSP format. write_hsp() writes HSP data.frame file.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count half-sib pairs in HSP format — as_hsp","text":"","code":"set.seed(666) result = tekka(\"-y20 -l2 --sa 2,2 --sj 2,2\") samples = result$sample_family[[1L]] as_hsp(samples) #> # A tibble: 55 × 6 #>    cohort_i cohort_j location_i location_j comps  hsps #>       <int>    <int>      <int>      <int> <int> <int> #>  1       11       11          1          1     1     1 #>  2       15       15          0          1     1     1 #>  3       19       19          0          0     1     1 #>  4        9        9          1          1     0     0 #>  5        9       11          1          1     2     0 #>  6        9       14          1          0     1     0 #>  7        9       15          1          0     1     0 #>  8        9       15          1          1     1     0 #>  9        9       16          1          0     2     0 #> 10        9       19          1          0     2     0 #> # ℹ 45 more rows"},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp2.html","id":null,"dir":"Reference","previous_headings":"","what":"Count half-sib pairs in HSP2 format — as_hsp2","title":"Count half-sib pairs in HSP2 format — as_hsp2","text":"extended version HSP format additional columns grouping.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count half-sib pairs in HSP2 format — as_hsp2","text":"","code":"as_hsp2(samples)  write_hsp2(x, path = \"hsp2.tsv\")  read_hsp2(path)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count half-sib pairs in HSP2 format — as_hsp2","text":"samples sample_family data.frame tekka() result. x outcome as_hsp2(). path file name connection write .","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count half-sib pairs in HSP2 format — as_hsp2","text":"data.frame \"hsp2\" class following columns: cohort_i, cohort_j: birth year samples capture_age_i, capture_age_j: samples location_i, location_j: sampling comps: number possible comparisons group j. samples compared pairwise, excluding self-comparisons. total number comparisons equals \\(n \\choose 2\\), n total sample size. hsps: count half-sib pairs observed group j","code":""},{"path":[]},{"path":"https://heavywatal.github.io/tekkamaki/reference/hsp2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count half-sib pairs in HSP2 format — as_hsp2","text":"","code":"set.seed(666) result = tekka(\"-y20 -l2 --sa 2,2 --sj 2,2\") samples = result$sample_family[[1L]] as_hsp2(samples) #> # A tibble: 66 × 8 #>    cohort_i cohort_j capture_age_i capture_age_j location_i location_j comps #>       <int>    <int>         <int>         <int>      <int>      <int> <int> #>  1       11       11             8             9          1          1     1 #>  2       15       15             4             5          0          1     1 #>  3       19       19             0             0          0          0     1 #>  4        9        9            10            10          1          1     0 #>  5        9       11            10             8          1          1     1 #>  6        9       11            10             9          1          1     1 #>  7        9       14            10             5          1          0     1 #>  8        9       15            10             4          1          0     1 #>  9        9       15            10             5          1          1     1 #> 10        9       16            10             4          1          0     2 #> # ℹ 56 more rows #> # ℹ 1 more variable: hsps <int>"},{"path":"https://heavywatal.github.io/tekkamaki/reference/kinship.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze kinship with igraph — find_kinship","title":"Analyze kinship with igraph — find_kinship","text":"Analyze kinship igraph","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/kinship.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze kinship with igraph — find_kinship","text":"","code":"find_kinship(samples, order = 4L, experimental = FALSE)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/kinship.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze kinship with igraph — find_kinship","text":"samples sample_family order integer experimental boolean","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/kinship.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyze kinship with igraph — find_kinship","text":"find_kinship() finds kinship given order.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize parameter json file — plot_parameters_json","title":"Visualize parameter json file — plot_parameters_json","text":"Visualize parameter json file","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize parameter json file — plot_parameters_json","text":"","code":"plot_parameters_json(obj = default_parameters_json())"},{"path":"https://heavywatal.github.io/tekkamaki/reference/parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize parameter json file — plot_parameters_json","text":"obj jsonlite object","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the path to the tekka installation. — tekka_path","title":"Get the path to the tekka installation. — tekka_path","text":"Get path tekka installation.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the path to the tekka installation. — tekka_path","text":"","code":"tekka_path()  tekka_version()"},{"path":"https://heavywatal.github.io/tekkamaki/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for quick visualization — augment.sample_family","title":"Methods for quick visualization — augment.sample_family","text":"Methods quick visualization","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for quick visualization — augment.sample_family","text":"","code":"# S3 method for class 'sample_family' augment(x, layout = NULL, ...)  # S3 method for class 'genealogy' augment(x, layout = NULL, ...)  layout_demography(x)  # S3 method for class 'genealogy' plot(x, ..., lwd = 0.5, cex = 5, pch = 16)  # S3 method for class 'sample_family' plot(x, ..., lwd = 0.5, cex = 5, pch = 16)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for quick visualization — augment.sample_family","text":"x sample_family data.frame. layout data.frame. ... passed layout function. lwd passed ggplot2::geom_segment. cex, pch passed ggplot2::geom_point ggplot2::geom_text.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Count parent-offspring pairs in POP format — as_pop","title":"Count parent-offspring pairs in POP format — as_pop","text":"Parent-offspring pairs counted potential offspring cohort potential parents grouped age, year, location sampling. Comparisons made younger older samples.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count parent-offspring pairs in POP format — as_pop","text":"","code":"as_pop(samples)  write_pop(x, path = \"pop.txt\")  read_pop(path)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count parent-offspring pairs in POP format — as_pop","text":"samples sample_family data.frame tekka() result. x outcome as_pop() path file name connection write ","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count parent-offspring pairs in POP format — as_pop","text":"data.frame \"pop\" class six columns: cohort: birth year offspring capture_year: parents capture_age: parents location: parents sampled pops: count parent-offspring pairs observed within samples comps: number possible comparisons.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count parent-offspring pairs in POP format — as_pop","text":"as_pop() converts sample_family data frame POP format. write_pop() writes POP data.frame file.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count parent-offspring pairs in POP format — as_pop","text":"","code":"set.seed(666) result = tekka(\"-y20 -l2 --sa 2,2 --sj 2,2\") samples = result$sample_family[[1L]] as_pop(samples) #> # A tibble: 30 × 6 #>    cohort capture_year capture_age location  pops comps #>     <int>        <int>       <int>    <int> <int> <int> #>  1     19           20           5        1     1     4 #>  2     20           20           9        1     1     4 #>  3     11           19          10        1     0     2 #>  4     14           19           8        1     0     1 #>  5     14           19          10        1     0     1 #>  6     14           20           9        1     0     1 #>  7     15           19           5        0     0     2 #>  8     15           19           8        1     0     2 #>  9     15           19          10        1     0     2 #> 10     15           20           9        1     0     2 #> # ℹ 20 more rows"},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop2.html","id":null,"dir":"Reference","previous_headings":"","what":"Count parent-offspring pairs in POP2 format — as_pop2","title":"Count parent-offspring pairs in POP2 format — as_pop2","text":"extended version POP format additional columns grouping.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count parent-offspring pairs in POP2 format — as_pop2","text":"","code":"as_pop2(samples)  write_pop2(x, path = \"pop2.tsv\")  read_pop2(path)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count parent-offspring pairs in POP2 format — as_pop2","text":"samples sample_family data.frame tekka() result. x outcome as_pop2() path file name connection write .","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count parent-offspring pairs in POP2 format — as_pop2","text":"data.frame \"pop\" class six columns: cohort_parent, cohort_offspring: birth year samples capture_age_parent, capture_age_offspring location_parent, location_offspring: sampling pops: count parent-offspring pairs observed within samples comps: number possible comparisons","code":""},{"path":[]},{"path":"https://heavywatal.github.io/tekkamaki/reference/pop2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count parent-offspring pairs in POP2 format — as_pop2","text":"","code":"set.seed(666) result = tekka(\"-y20 -l2 --sa 2,2 --sj 2,2\") samples = result$sample_family[[1L]] as_pop2(samples) #> # A tibble: 51 × 8 #>    cohort_parent cohort_offspring capture_age_parent capture_age_offspring #>            <int>            <int>              <int>                 <int> #>  1            11               20                  9                     0 #>  2            15               19                  5                     0 #>  3             9               11                 10                     8 #>  4             9               11                 10                     9 #>  5             9               14                 10                     5 #>  6             9               15                 10                     4 #>  7             9               15                 10                     5 #>  8             9               16                 10                     4 #>  9             9               19                 10                     0 #> 10             9               19                 10                     0 #> # ℹ 41 more rows #> # ℹ 4 more variables: location_parent <int>, location_offspring <int>, #> #   pops <int>, comps <int>"},{"path":"https://heavywatal.github.io/tekkamaki/reference/read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read functions — read_result","title":"Read functions — read_result","text":"Read functions","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read functions — read_result","text":"","code":"read_result(file)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read functions — read_result","text":"file Either path file, connection, literal data (either single string raw vector). Files ending .gz, .bz2, .xz, .zip automatically uncompressed. Files starting http://, https://, ftp://, ftps:// automatically downloaded. Remote gz files can also automatically downloaded decompressed. Literal data useful examples tests. recognised literal data, input must either wrapped (), string containing least one new line, vector containing least one string new line. Using value clipboard() read system clipboard.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/read.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read functions — read_result","text":"read_result reads result tekka.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics augment igraphlite as_igraph","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/snp.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to generate SNPs on given samples. — make_snp","title":"Functions to generate SNPs on given samples. — make_snp","text":"Functions generate SNPs given samples.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/snp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to generate SNPs on given samples. — make_snp","text":"","code":"make_snp(samples, ss)  make_snp_chromosome(genealogy, segsites)  place_mutations(genealogy, segsites, v_sampled = NULL)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/snp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to generate SNPs on given samples. — make_snp","text":"samples data.frame: sample_family output gather_segments(). ss sequence segsites; length number chromosome; element number segsites chromosome. named vector given, output also named. genealogy output make_gene_genealogy(). segsites number segregating sites segment. v_sampled sampled vertices. Use fix output order.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/snp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions to generate SNPs on given samples. — make_snp","text":"make_snp() generates list SNP data.frames calling make_snp_chromosome() parallel. Use RNGkind(\"L'Ecuyer-CMRG\") set.seed() get reproducible results. number CPU cores used can configured via mc.cores option. make_snp_chromosome() simulate SNP data.frame chromosome calling place_mutations() recombination(). place_mutations() generates SNP data.frame randomly placing fixed number mutations given genealogy. means sites perfectly linked .","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/tekka.html","id":null,"dir":"Reference","previous_headings":"","what":"Run C++ simulation. — tekka","title":"Run C++ simulation. — tekka","text":"result first written directory cache, read data.frame. previous result exactly arguments found cache, read without calling tekka.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/tekka.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run C++ simulation. — tekka","text":"","code":"tekka(args = character(0L), cache = NULL)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/tekka.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run C++ simulation. — tekka","text":"args Command line arguments string vector. See tekka manual tekka(\"--help\") available options. Note random --seed appended given. Use set.seed() --seed explicitly reproducibility caching. cache Parent directory tekka output. TRUE equivalent \".\" (current directory). tempdir() used cases including default (NULL), discarded end R session. Set FALSE force tekka run overwrite previous results .","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/tekkamaki-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tekkamaki: Individual-based simulator of pacific bluefin tuna — tekkamaki-package","title":"tekkamaki: Individual-based simulator of pacific bluefin tuna — tekkamaki-package","text":"Individual-based simulator pacific bluefin tuna.","code":""},{"path":[]},{"path":"https://heavywatal.github.io/tekkamaki/reference/tekkamaki-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tekkamaki: Individual-based simulator of pacific bluefin tuna — tekkamaki-package","text":"Maintainer: Watal M. Iwasaki heavywatal@gmail.com (ORCID)","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/vcf.html","id":null,"dir":"Reference","previous_headings":"","what":"Utilities for VCF format — as_vcf","title":"Utilities for VCF format — as_vcf","text":"as_vcf() converts SNP data.frame VCF-like data.frame.","code":""},{"path":"https://heavywatal.github.io/tekkamaki/reference/vcf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utilities for VCF format — as_vcf","text":"","code":"as_vcf(x, phased = TRUE, chrom = NA_character_, pos = NA_integer_)  write_vcf(x, file)  read_vcf(file)  as_vcf_gt(x, phased = TRUE)  add_pos_id(x)"},{"path":"https://heavywatal.github.io/tekkamaki/reference/vcf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utilities for VCF format — as_vcf","text":"x SNP data.frame VCF data.frame. phased logical switch separators: | vs /. chrom Characters. pos Integers. file path connection.","code":""}]
